main:
    // Initialize loop counter (R0) to 0
    LLI R0, #0           // R0 = 0

    // Set N (number of words to move) in R1; here N = 0x0A (10 words)
    LLI R1, #0Ah         // R1 = 0Ah

    // Set base address for source block in R2 (source starts at address 30h)
    LLI R2, #30h         // R2 = 30h

    // Set base address for destination block in R3 (destination starts at address 40h)
    LLI R3, #40h         // R3 = 40h

move_loop:
    CMP R0, R1           // Compare loop counter (R0) with N (R1)
    BEQ output_loop      // If R0 == N, branch to output loop

    // Load word from source: R5 = MEM[R2 + R0]
    LDR R5, [R2, R0]     // R5 = Source[R0]

    // Store word to destination: MEM[R3 + R0] = R5
    STR R5, [R3, R0]     // Destination[R0] = R5

    // Increment loop counter: R0 = R0 + 1
    ADDI R0, R0, #1      // R0 = R0 + 1

    // Repeat the move loop
    B[AL] move_loop      // Unconditional branch to move_loop

output_loop:
    // Reset loop counter for output
    LLI R0, #0           // R0 = 0

out_loop:
    CMP R0, R1           // Compare loop counter (R0) with N (R1)
    BEQ finish           // If R0 == N, all words have been output; branch to finish

    // Load word from destination block into R7
    LDR R7, [R3, R0]     // R7 = Destination[R0]

    // Output the word in R7
    OutR R7             // Output word

    // Increment loop counter for output: R0 = R0 + 1
    ADDI R0, R0, #1      // R0 = R0 + 1

    // Continue output loop
    B[AL] out_loop      // Unconditional branch to out_loop

finish:
    HLT                 // Halt processor

//================================
// RAM Data declarations (all addresses and data in 16-bit hex)
// Source block: 10 words stored consecutively starting at address 30h
RAM 30h, 1234h
RAM 31h, 5678h
RAM 32h, 9ABCh
RAM 33h, DEF0h
RAM 34h, 1111h
RAM 35h, 2222h
RAM 36h, 3333h
RAM 37h, 4444h
RAM 38h, 5555h
RAM 39h, 6666h
