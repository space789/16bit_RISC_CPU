main:
    // Set base addresses for the two 64-bit integers and the result
    LLI R5, #50       // R5 = base address for first 64-bit integer (RAM 50-53)
    LLI R6, #54       // R6 = base address for second 64-bit integer (RAM 54-57)
    LLI R7, #58      // R7 = base address for result (RAM 58-61)

    //---------------------------
    // Add lowest 16-bit words (word0)
    LDR R0, [R5, #0]  // Load first integer word0 from RAM[50]
    LDR R1, [R6, #0]  // Load second integer word0 from RAM[54]
    ADD R2, R0, R1    // R2 = first_word0 + second_word0 (no carry input)
    STR R2, [R7, #0] // Store result word0 to RAM[58]

    //---------------------------
    // Add next 16-bit words (word1) with carry
    LDR R0, [R5, #1]  // Load first integer word1 from RAM[51]
    LDR R1, [R6, #1]  // Load second integer word1 from RAM[55]
    ADC R2, R0, R1    // R2 = first_word1 + second_word1 + carry from word0
    STR R2, [R7, #1] // Store result word1 to RAM[59]

    //---------------------------
    // Add next 16-bit words (word2) with carry
    LDR R0, [R5, #2]  // Load first integer word2 from RAM[52]
    LDR R1, [R6, #2]  // Load second integer word2 from RAM[56]
    ADC R2, R0, R1    // R2 = first_word2 + second_word2 + carry from word1
    STR R2, [R7, #2] // Store result word2 to RAM[60]

    //---------------------------
    // Add highest 16-bit words (word3) with carry
    LDR R0, [R5, #3]  // Load first integer word3 from RAM[53]
    LDR R1, [R6, #3]  // Load second integer word3 from RAM[57]
    ADC R2, R0, R1    // R2 = first_word3 + second_word3 + carry from word2
    STR R2, [R7, #3] // Store result word3 to RAM[61]

    //---------------------------
    // Output the 64-bit result (from highest word to lowest)
    LDR R3, [R7, #3]
    OutR R3         // Output highest word (word3)
    LDR R3, [R7, #2]
    OutR R3         // Output word2
    LDR R3, [R7, #1]
    OutR R3         // Output word1
    LDR R3, [R7, #0]
    OutR R3         // Output lowest word (word0)

    HLT             // Halt processor

//================================
// RAM Data declarations: Two 64-bit unsigned integers
// The numbers are designed to produce carry during addition

// First 64-bit integer stored in RAM addresses 50 to 53
// Word0 (lowest): 0xFFFF, Word1: 0x0000, Word2: 0x1234, Word3 (highest): 0xFFFF
RAM 50, FFFFh     // word0
RAM 51, 0000h     // word1
RAM 52, 1235h     // word2
RAM 53, 6600h     // word3

// Second 64-bit integer stored in RAM addresses 54 to 57
// Word0: 0x0001, Word1: 0xFFFF, Word2: 0xEDCB, Word3: 0x0001
RAM 54, 0001h     // word0
RAM 55, 8887h     // word1
RAM 56, EDCBh     // word2
RAM 57, 0065h     // word3

// The 64-bit result will be stored in RAM addresses 58 to 61
// Expected addition steps:
//   Word0: 0xFFFF + 0x0001 = 0x10000 -> result=0x0000, carry=1
//   Word1: 0x0000 + 0x8887 + 1 = 0x8888 -> result=0x8888, carry=0
//   Word2: 0x1235 + 0xEDCB = 0x10000 -> result=0x0000, carry=1
//   Word3: 0x6600 + 0x0065 + 1 = 0x6666 -> result=0x6666, carry=0
// Final 64-bit result: {word3, word2, word1, word0} = {0x6666, 0x0000, 0x8888, 0x0000}
