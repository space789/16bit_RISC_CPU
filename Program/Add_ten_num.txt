main:
    // Initialize loop counter k = 0 in R0
    LLI R0, #0         // R0 = 0

    // Set loop limit i = A in R1
    LLI R1, #A         // R1 = A

    // Load base address of data array into R2 (data at RAM addresses 50-59)
    LLI R2, #50        // R2 = 50

    // Initialize accumulator sum to 0 in R4
    LLI R4, #0         // R4 = 0

loop:
    CMP R0, R1         // Compare loop counter (R0) with loop limit (R1)
    BEQ finish         // If R0 equals R1 (10 iterations done), branch to finish

    // Load current number from memory: R3 = MEM[R2 + R0]
    LDR R3, [R2, R0]   // R3 = Data[k]

    // Add the loaded number (R3) to accumulator (R4)
    ADD R4, R4, R3     // R4 = R4 + R3

    // Increment loop counter: R0 = R0 + 1
    ADDI R0, R0, #1    // Increment k

    // Continue loop unconditionally
    B[AL] loop         // Branch back to loop

finish:
    // Output final sum stored in R4
    OutR R4            // Output result

    // Halt processor
    HLT                // Halt execution

//================================
// RAM Data declarations: 10 consecutive 16-bit numbers stored at addresses 50-59
RAM 50, 0101h       // First number: 1
RAM 51, 0202h       // Second number: 2
RAM 52, 0303h       // Third number: 3
RAM 53, 0404h       // Fourth number: 4
RAM 54, 0505h       // Fifth number: 5
RAM 55, 0606h       // Sixth number: 6
RAM 56, 0707h       // Seventh number: 7
RAM 57, 0808h       // Eighth number: 8
RAM 58, 0909h       // Ninth number: 9
RAM 59, 0A0Ah       // Tenth number: 10
// Final answer: 0x3737
